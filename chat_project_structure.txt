# Docker Bootcamp Chat Application

A real-time chat application built with TypeScript, designed for Docker bootcamp participants. The application is split into separate client and server environments, each with their own Docker containers.

## Architecture

- **Server**: Node.js + TypeScript + Socket.IO + PostgreSQL
- **Client**: Next.js 15 + TypeScript + Socket.IO Client + Tailwind CSS
- **Database**: PostgreSQL 15
- **Containerization**: Docker + Docker Compose

## Project Structure

```
docker-bootcamp-chat/
├── README.md
├── docker-compose.yml                 # Root compose file to run both services
├── server/
│   ├── src/
│   │   ├── index.ts                  # Main server entry point
│   │   ├── database.ts               # Database connection and queries
│   │   └── types.ts                  # TypeScript type definitions
│   ├── package.json
│   ├── tsconfig.json
│   ├── Dockerfile
│   ├── docker-compose.yml            # Server-only deployment
│   ├── init.sql                      # PostgreSQL initialization
│   └── .env.example
└── client/
    ├── src/
    │   ├── app/
    │   │   ├── page.tsx              # Main chat application
    │   │   ├── layout.tsx            # App layout
    │   │   ├── globals.css           # Global styles
    │   │   └── api/health/route.ts   # Health check endpoint
    │   ├── components/
    │   │   ├── ConfigScreen.tsx      # Server configuration screen
    │   │   ├── ChatScreen.tsx        # Main chat interface
    │   │   ├── LoginScreen.tsx       # Username entry screen
    │   │   └── ConnectionStatus.tsx  # Connection status indicator
    │   ├── hooks/
    │   │   └── useSocket.ts          # Socket.IO client hook
    │   └── types/
    │       └── index.ts              # TypeScript type definitions
    ├── package.json
    ├── tsconfig.json
    ├── tailwind.config.js
    ├── postcss.config.js
    ├── next.config.js
    ├── Dockerfile
    ├── docker-compose.yml            # Client-only deployment
    └── .env.example
```

## Features

### Server Features
- **Real-time messaging** with Socket.IO
- **PostgreSQL database** for message persistence
- **User management** with active user tracking
- **Typing indicators** for enhanced UX
- **Message history** loading
- **Health check endpoint** for monitoring
- **Docker-ready** with multi-stage builds
- **Environment variable configuration**

### Client Features
- **Server configuration screen** (if no env var provided)
- **Responsive design** with Tailwind CSS
- **Real-time chat interface** with modern UI
- **User presence indicators**
- **Typing indicators**
- **Mobile-friendly sidebar**
- **Connection status monitoring**
- **Message timestamp display**
- **Docker-ready** with Next.js standalone output

## Quick Start

### Option 1: Run Everything Together
```bash
# Clone the repository
git clone <repo-url>
cd docker-bootcamp-chat

# Run the full stack
docker-compose up --build

# Access the application
# Client: http://localhost:3000
# Server API: http://localhost:3001
```

### Option 2: Run Services Separately
```bash
# Server only
cd server
docker-compose up --build

# Client only (in another terminal)
cd client
docker-compose up --build
```

### Option 3: Development Mode
```bash
# Server development
cd server
cp .env.example .env
npm install
npm run dev

# Client development (in another terminal)
cd client
cp .env.example .env.local
npm install
npm run dev
```

## Environment Configuration

### Server Environment Variables
Create `server/.env`:
```bash
DATABASE_URL=postgresql://chatuser:chatpass@localhost:5432/chatdb
PORT=3001
CORS_ORIGIN=http://localhost:3000
NODE_ENV=development
```

### Client Environment Variables
Create `client/.env.local`:
```bash
NEXT_PUBLIC_SERVER_URL=http://localhost:3001
NODE_ENV=development
```

**Note**: If `NEXT_PUBLIC_SERVER_URL` is not provided, the client will show a configuration screen where users can manually enter the server details.

## Docker Deployment Scenarios

### Scenario 1: Local Development
```bash
# Use default localhost URLs
docker-compose up --build
```

### Scenario 2: Network Deployment
Update environment variables in `docker-compose.yml`:
```yaml
environment:
  - NEXT_PUBLIC_SERVER_URL=http://192.168.1.100:3001
  - CORS_ORIGIN=http://192.168.1.100:3000
```

### Scenario 3: Production with Domain
```yaml
environment:
  - NEXT_PUBLIC_SERVER_URL=https://chat-api.yourdomain.com
  - CORS_ORIGIN=https://chat.yourdomain.com
```

## API Endpoints

### Server Endpoints
- `GET /api/health` - Health check
- `GET /api/messages` - Get recent messages
- WebSocket connection on `/` for real-time communication

### Client Endpoints
- `GET /api/health` - Client health check

## Socket.IO Events

### Client to Server
- `join` - Join the chat with username
- `message` - Send a message
- `typing` - Indicate typing
- `stop-typing` - Stop typing indication

### Server to Client
- `message` - New message received
- `chat-history` - Historical messages
- `user-joined` - User joined notification
- `user-left` - User left notification
- `active-users` - List of active users
- `typing` - User typing indication
- `stop-typing` - Stop typing indication
- `error` - Error messages

## Database Schema

```sql
CREATE TABLE messages (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    message TEXT NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    room VARCHAR(50) DEFAULT 'general'
);
```

## Troubleshooting

### Client Configuration Issues
If the client shows a configuration screen:
1. Ensure the server is running and accessible
2. Check that the server URL and port are correct
3. Verify network connectivity between client and server

### Connection Issues
1. Check Docker container logs: `docker-compose logs`
2. Verify PostgreSQL is running: `docker-compose ps`
3. Test server health: `curl http://localhost:3001/api/health`
4. Test client health: `curl http://localhost:3000/api/health`

### Development Issues
1. Ensure all dependencies are installed: `npm install`
2. Check TypeScript compilation: `npm run build`
3. Verify environment variables are set correctly

## Learning Objectives

This application demonstrates:
- **Containerization** with Docker and Docker Compose
- **Multi-service architecture** with separate client/server containers
- **Real-time communication** with WebSockets
- **Database integration** with PostgreSQL
- **TypeScript** for type safety
- **Modern React** with Next.js 15
- **Environment configuration** for different deployment scenarios
- **Health checks** and monitoring
- **Build optimization** with multi-stage Docker builds

Perfect for Docker bootcamp participants to understand container orchestration, networking, and full-stack application deployment!