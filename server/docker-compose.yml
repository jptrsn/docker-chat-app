services:
  chat-server:
    container_name: chat-server
    build: .
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://chatuser:chatpass@postgres:5432/chatdb
      - CORS_ORIGIN=https://opensourceteacher.ca  # Update this!
      - PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chat-network
      - proxy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # API routes (/api/*)
      - "traefik.http.routers.chat-server.rule=Host(`opensourceteacher.ca`) && PathPrefix(`/api`)"
      - "traefik.http.routers.chat-server.entrypoints=websecure"
      - "traefik.http.routers.chat-server.tls.certresolver=manual"
      - "traefik.http.routers.chat-server.middlewares=api-stripprefix,secure-headers"
      - "traefik.http.services.chat-server.loadbalancer.server.port=3001"
      - "traefik.http.routers.chat-server.priority=2"
      # Strip /api prefix middleware
      - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: chatdb
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatuser -d chatdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  chat-network:
    driver: bridge
  proxy:
    external: true